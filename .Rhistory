time.date <- Sys.time()
# # Pobranie i zaladowanie danych do R dla srodowiska linux
# if( !file.exists("./[SAD-PROJ-1]konradbednarek") ){
#     dir.create("./[SAD-PROJ-1]konradbednarek")
# }
# fileURL <- ""
# download.file(fileURL, destfile = "./[SAD-PROJ-1]konradbednarek/trial-4.csv")
patients <- read.table("./[SAD-PROJ-1]konradbednarek/trial-4.csv",
header = TRUE, sep = "\t", row.names = 1)
#mut.names <- paste0("mut_", 1:99)
col.names <- paste0("patients$mut_", 1:99)
repeat {
f <- as.formula(paste("patients$severity ~ ", paste(col.names,
collapse = "+")))
my.lm <- lm(f)
vector <- summary(my.lm)$coef[,4]
vector <- vector[2:length(vector)]
if(max(vector) <= 0.05){
break
} else {
col.names <- names(vector[vector != max(vector)])
col.names <- col.names[col.names != "(Intercept)"]
}
}
col.names
summary(my.lm)
plot(my.lm)
?cor
?character
substr("abcdef", 2, 4)
mut.names(substr(col.names, 10))
mut.names <- substr(col.names, 10)
?apply
?sapply
mut.names <- sapply(col.names, substr, 10, nchar)
mut.names <- sapply(col.names, substr, 10)
mut.names <- sapply(col.names, function(x){substr(x,10,nchar(x))})
mut.names <- lapply(col.names, function(x){substr(x,10,nchar(x))})
mut.names <- apply(col.names, function(x){substr(x,10,nchar(x))})
apply
?apply
dim(col.names)
?box-cox
?boxcox
??boxcox
?boxcox.test
??boxcox.test
boxcox(f)
?boxcox
?boxcox
??boxcox
library("MASS", lib.loc="/usr/lib/R/library")
boxcox(f)
patients$sev
f
?boxcox
boxcox(my.lm)
?shapiro
??shapiro
mut.names
mut.names <- sapply(col.names, function(x){substr(x,10,nchar(x))})
mut.names
class(mut.names)
class(col.names)
mut.names <- lapply(col.names, function(x){substr(x,10,nchar(x))})
mut.names
mut.names <- as.character(lapply(col.names, function(x){substr(x,10,nchar(x))}))
mut.names
shapiro.test(patients[,append("severity",mut.names)])
?append
shapiro.test(patients[,append(mut.names, "severity")])
shapiro.test(patients[,append(mut.names)])
shapiro.test(patients[,mut.names])
shapiro.test
sick <- colSums(patients[,mut.names])
names(sick) <- mut.names
shapiro.test(sick)
qqplot(sick)
qqplot(patients[,mut.names])
qqplot(patients[,mut.names], patients$sev)
qqplot(y=sick)
qqplot(patients[,mut.names])
qqplot(patients[,mut.names],patients[,mut.names])
plot(shapiro.test(sick))
qqplot(shapiro.test(sick))
shapiro.test(sick)
plot(my.lm)
## Przygotowanie danych do analizy
#
# Czas i data przeprowadzonej analizy
time.date <- Sys.time()
# # Pobranie i zaladowanie danych do R dla srodowiska linux
# if( !file.exists("./[SAD-PROJ-1]konradbednarek") ){
#     dir.create("./[SAD-PROJ-1]konradbednarek")
# }
# fileURL <- ""
# download.file(fileURL, destfile = "./[SAD-PROJ-1]konradbednarek/trial-4.csv")
patients <- read.table("./[SAD-PROJ-1]konradbednarek/trial-4.csv",
header = TRUE, sep = "\t", row.names = 1)
#mut.names <- paste0("mut_", 1:99)
col.names <- paste0("patients$mut_", 1:99)
repeat {
f <- as.formula(paste("patients$severity ~ ", paste(col.names,
collapse = "+")))
my.lm <- lm(f)
vector <- summary(my.lm)$coef[,4]
vector <- vector[2:length(vector)]
if(max(vector) <= 0.01){
break
} else {
col.names <- names(vector[vector != max(vector)])
col.names <- col.names[col.names != "(Intercept)"]
}
}
mut.names <- as.character(lapply(col.names, function(x){substr(x,10,nchar(x))}))
sick <- colSums(patients[,mut.names])
names(sick) <- mut.names
plot(my.lm)
## Przygotowanie danych do analizy
#
# Czas i data przeprowadzonej analizy
time.date <- Sys.time()
# # Pobranie i zaladowanie danych do R dla srodowiska linux
# if( !file.exists("./[SAD-PROJ-1]konradbednarek") ){
#     dir.create("./[SAD-PROJ-1]konradbednarek")
# }
# fileURL <- ""
# download.file(fileURL, destfile = "./[SAD-PROJ-1]konradbednarek/trial-4.csv")
patients <- read.table("./[SAD-PROJ-1]konradbednarek/trial-4.csv",
header = TRUE, sep = "\t", row.names = 1)
#mut.names <- paste0("mut_", 1:99)
col.names <- paste0("patients$mut_", 1:99)
repeat {
f <- as.formula(paste("patients$severity ~ ", paste(col.names,
collapse = "+")))
my.lm <- lm(f)
vector <- summary(my.lm)$coef[,4]
vector <- vector[2:length(vector)]
if(max(vector) <= 0.05){
break
} else {
col.names <- names(vector[vector != max(vector)])
col.names <- col.names[col.names != "(Intercept)"]
}
}
mut.names <- as.character(lapply(col.names, function(x){substr(x,10,nchar(x))}))
sick <- colSums(patients[,mut.names])
names(sick) <- mut.names
library("MASS")
plot(my.lm)
sick
sick <- colSums(patients[patients$sev > 0, mut.names] -
patients[patients$sev == 0, mut.names])
sick
??white
?test
??test
cor.test(f)
cor.test(paste("~", paste(col.names, collapse = "+"))))
cor.test(paste("~", paste(col.names, collapse = "+")))
cor.test(paste("~", paste(col.names, collapse = "+")), paients)
cor.test(paste("~", paste(col.names, collapse = "+")), patients)
?sapply
cor.tests <- sapply(col.names, function(name){ cor.test(paste("~patients$severity + ", name))})
?vapply
cor.test(paste("~", paste(col.names[1:2], collapse = "+"), patients)
)
?cor.test
cor.test(as.formula(paste("~", paste(col.names, collapse = "+"))), patients)
cor.tests <- sapply(col.names, function(name){ cor.test(as.formula(paste("~patients$severity + ", name))})
cor.tests <- sapply(col.names, function(name){ cor.test(as.formula(paste("~patients$severity + ", name)),patients)})
str(cor.tests)
cor.tests[1]
summary(cor.tests[1])
summary(cor.tests[[1])
summary(cor.tests[[1]])
cor.tests[[1]]
cor.tests
mu.names
mut.names
cor.tests2 <- cor.test(patients[,mut.names], patients)
cor.tests2 <- cor.test(patients[,mut.names], patients[,mut.names], patients)
cor.tests2 <- cor.test(patients[,mut.names], patients[,mut.names])
?cor
?
?matrix
array(mut.names)
as.array(mut.names)
cor.tests2 <- matrix(as.numeric(NA), length(mut.names), length(mut.names))
dimnames(cor.tests2)<-mut.names
dimnames(cor.tests2)<-list(mut.names, mut.names)
cor.tests2
install.packages("Lattice")
install.packages("lattice")
remove.packages("elwms", lib="/usr/lib/R/site-library")
remove.packages("sg", lib="/usr/lib/R/site-library")
rm(list=ls())
?binom
?qbinom
?phyper
?matrix
?colbind
?cbind
p.Bristol <- cbind(c(3, 1), c(1, 3))
p.Bristol
?data.frame
p.Bristol <- data.frame(p.Bristol,
row.names = c("Najpierw herbata", "Najpierw mleko"))
p.Bristol
names(p.Bristol)
names(p.Bristol) <- c("Twierdzi, ze najpierw herbata",
"Twierdzi, ze najpierw mleko")
p.Bristol
?phyper
m <- 10; n <- 7; k <- 8
x <- 0:(k+1)
rbind(phyper(x, m, n, k), dhyper(x, m, n, k))
all(phyper(x, m, n, k) == cumsum(dhyper(x, m, n, k)))  # FALSE
## but error is very small:
signif(phyper(x, m, n, k) - cumsum(dhyper(x, m, n, k)), digits = 3)
p.Bristol
herbata <- 3; mleko <- 1
phyper(herbata, 4, 4, 4)
phyper(herbata, 4, 4, 4, lower.tail = FALSE)
rm(list = c(k,m,n,x))
rm(k)
rm(m)
rm(n)
rm(x)
herbata <- c(3,1)
phyper(herbata, 4, 4, 4, lower.tail = FALSE)
tea.milk <- c(3,1)
phyper(tea.milk, 4, 4, 4, lower.tail = FALSE)
p.Bristol
tea.milk <- c(3,1)
phyper(tea.milk, 3, 1, 4, lower.tail = FALSE)
phyper(tea.milk, 4, 4, 8, lower.tail = FALSE)
phyper(c(3,1,1,3), 4, 4, 8, lower.tail = FALSE)
?rbinom
binom10 <- rbinom(10,20,0.5)
binom100 <- rbinom(100,20,0.5)
binom1000 <- rbinom(1000,20,0.5)
summary(binom10)
summary(binom100)
summary(binom1000)
?phyper
plot(phyper(c(3,1), 4, 4, 8, lower.tail = False))
plot(phyper(c(3,1), 4, 4, 8, lower.tail = FALSE))
plot(phyper(c(3,1), 4, 4, 8))
plot(rhyper(c(3,1), 4, 4, 8))
plot(rhyper(10,4,4,8))
plot(rhyper(10,4,4,1))
plot(rhyper(10,4,4,1), method = 'l')
?runif
?phyper
?rnorm
?t.test
cel.C.10 <- rnorm(10);
t.test(cel.C.10)
t.test(cel.P1.10)
# Positive mean                 Negative mean
cel.P1.10  <- rnorm(10, 1);     cel.N1.10  <- rnorm(10, -1);
cel.P2.10  <- rnorm(10, 2);     cel.N2.10  <- rnorm(10, -2);
cel.P10.10 <- rnorm(10, 10);    cel.N10.10 <- rnorm(10, -10);
# n = 100
# Control group
cel.C.100 <- rnorm(100);
# Positive mean                   Negative mean
cel.P1.100  <- rnorm(100, 1);     cel.N1.100  <- rnorm(100, -1);
cel.P2.100  <- rnorm(100, 2);     cel.N2.100  <- rnorm(100, -2);
cel.P10.100 <- rnorm(100, 10);    cel.N10.100 <- rnorm(100, -10);
# n = 10000
# Control group
cel.C.10000 <- rnorm(10000);
# Positive mean                       Negative mean
cel.P1.10000  <- rnorm(10000, 1);     cel.N1.10000  <- rnorm(10000, -1);
cel.P2.10000  <- rnorm(10000, 2);     cel.N2.10000  <- rnorm(10000, -2);
cel.P10.10000 <- rnorm(10000, 10);    cel.N10.10000 <- rnorm(10000, -10);
t.test(cel.P1.10)
t.test(cel.P2.10)
t.test(cel.P10.10)
setwd("/home/cpt_jenning/Dokumenty/Coursera/Data Science Specialization/5 - Reproducible research/Assignments/RepData_PeerAssessment1")
# 1. Loading data
data <- read.csv("activity.csv",
colClasses = c("numeric", "factor", "factor"))
# 1. Plotting histogram
sum.date <- numeric(length = length(levels(data$date)))
names(sum.date) <- levels(data$date)
for(i in seq_along(sum.date)){
sum.date[i] = sum(data[data$date == names(sum.date)[i], "steps"],
na.rm = TRUE)
# In this case either if sum is equal to 0 or all of the values in that
# particular day are missing the sum will be equal to 0.
}
hist(sum.date, breaks = 60,
main = "Histogram of the total number of steps taken each day",
xlab = "Number of steps")
Mean <- mean(sum.date)
Median <- median(sum.date, na.rm = TRUE)
Median
# 1A. Preapering data for plotting
intervals <- sort(as.numeric(levels(data$interval)))
names(intervals) <- as.character(intervals)
for(i in seq_along(intervals)){
intervals[i] = mean(data[data$interval == intervals[i], "steps"],
na.rm = TRUE)
}
# 1B. Plotting
plot(names(intervals), intervals,
type = "l", xlab = "Intervals", ylab = "Mean",
main = "Time series plot of the 5-minute interval\n and the average number of steps taken")
# 2. Which interval contains the maximum number of steps ?
Max <- max(data$steps, na.rm = TRUE)
as.numeric(data[data[!is.na(data$steps), "steps"] == max(data$steps, na.rm = TRUE),
"interval"])
# 1. Number of missing values
sum(is.na(data$steps))
# 3. Creating new dataset
steps <- data$steps
for(i in seq_along(steps)){
if(is.na(steps[i])){
steps[i] = intervals[[ data[i, "interval"] ]]
}
}
new.data <- data.frame(steps, data$date, data$interval)
names(new.data) <- names(data)
# 4. Plotting histogram
for(i in seq_along(sum.date)){
sum.date[i] = sum(new.data[new.data$date == names(sum.date)[i], "steps"])
}
hist(sum.date, breaks = 60,
main = "Histogram of the total number of steps taken each day",
xlab = "Number of steps")
new.mean <- mean(sum.date)
new.median <- median(sum.date)
new.median
differences <- data.frame(c(Mean, new.mean), c(Median, new.median),
row.names = c("means", "medians"))
names(differences) <- c("NA excluded", "NA replaced")
differences
new.data$date <- as.POSIXct(new.data$date, tz = "GTM") +
(60 * as.numeric(as.character(new.data$interval)))
steps <- data$steps
for(i in seq_along(steps)){
if(is.na(steps[i])){
steps[i] = intervals[[ data[i, "interval"] ]]
}
}
new.data <- data.frame(steps, data$date, data$interval)
names(new.data) <- names(data)
head(new.data)
weekdays(new.data[1,"date"])
?weekdays
class(new.date$date)
class(new.data$date)
as.Date(new.data[1,"date"])
tmp <- as.Date(new.data[1,"date"])
new.data$date <- as.Date(new.data$date)
class(new.data$date)
weekdays(new.data[1,"date"])
?Date
weekdays(new.data[1:10,"date"])
weekdays(new.data[c(1,56,107,223,3,17,458,593,619,780,840,960),"date"])
weekdays(new.data[c(1,317,458,593,840,960),"date"])
weekdays(new.data[c(1,317,593,840,960),"date"])
weekdays(new.data[c(1,317,593,960,1123,1250),"date"])
weekdays(new.data[c(1,317,593,960,1250,1410),"date"])
weekdays(new.data[c(1,317,593,960,1250,1510),"date"])
weekdays(new.data[c(1,317,593,960,1250,1510,1897),"date"])
?factor
?character
dim(new.data)
steps <- data$steps
for(i in seq_along(steps)){
if(is.na(steps[i])){
steps[i] = intervals[[ data[i, "interval"] ]]
}
}
new.data <- data.frame(steps, data$date, data$interval)
names(new.data) <- names(data)
new.data$date <- as.POSIXct(new.data$date, tz = "GTM") +
(60 * as.numeric(as.character(new.data$interval)))
## <- Here is Bug
new.data$date <- as.POSIXlt(new.data$date)
isWeekend <- character(dim(new.data)[1])
for(i in seq_along(isWeekend)){
if(new.data[i, "date"]$mday == 6 || isWeekend[i]$mday == 7){
isWeekend[i] <- "weekend"
} else{
isWeekend[i] <- "weekday"
}
}
new.data[1,"date"]
new.data[1,"date"]$mday
new.data$date <- as.POSIXct(new.data$date, tz = "GTM") +
(60 * as.numeric(as.character(new.data$interval)))
## <- Here is Bug
new.data$date <- as.POSIXlt(new.data$date)
isWeekend <- character(dim(new.data)[1])
for(i in seq_along(isWeekend)){
if(new.data[i, "date"]$mday == 6 || new.data[i, "date"]$mday == 7){
isWeekend[i] <- "weekend"
} else{
isWeekend[i] <- "weekday"
}
}
isWeekend <- as.factor(isWeekend)
levels(isWeekend)
nclass(isWeekend)
unclass(isWeekend)
new.data$isWeekend <- as.factor(isWeekend)
head(new.data)
sub.weekend <- new.data[new.data$isWeekend == "weekend",]
sub.weekend <- new.data[new.data$isWeekend == "weekend",]
iWeekend <- sort(as.numeric(levels(sub.weekend$interval)))
names(iWeekend) <- as.character(iWeekend)
for(i in seq_along(intervals)){
iWeekend[i] = mean(sub.weekend[sub.weekend$interval == iWeekend[i], "steps"])
}
sub.weekday <- new.data[new.data$isWeekend == "weekday",]
iWeekday <- sort(as.numeric(levels(sub.weekday$interval)))
names(iWeekday) <- as.character(iWeekday)
for(i in seq_along(intervals)){
iWeekday[i] = mean(sub.weekend[sub.weekend$interval == iWeekday[i], "steps"])
}
# 2B. Creating the plot
par(mfcol = c(2, 1))
plot(names(iWeekend), iWeekend, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekend")
?par
?plot
par(mfcol = c(2, 1))
plot(names(iWeekend), iWeekend, type = "l",
xlab = "Intervals", ylab = "Number of steps",
sub = "Weekend", col = "ligthblue")
plot(names(iWeekend), iWeekend, type = "l",
xlab = "Intervals", ylab = "Number of steps",
sub = "Weekend", col = "ligthblue")
par(mfcol = c(2, 1))
plot(names(iWeekend), iWeekend, type = "l",
xlab = "Intervals", ylab = "Number of steps",
sub = "Weekend", col = "blue")
plot(names(iWeekend), iWeekend, type = "l",
xlab = "Intervals", ylab = "Number of steps",
sub = "Weekend", col = "blue")
plot(names(iWeekend), iWeekend, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekend", col = "blue")
plot(names(iWeeday), iWeekday, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekday", col = "blue")
par(mfcol = c(2, 1))
plot(names(iWeekend), iWeekend, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekend", col = "blue")
plot(names(iWeekday), iWeekday, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekday", col = "blue")
?panel.plot
??panelplot
panel.smooth(names(iWeekend), iWeekend, type = "l", xlab = "Intervals", ylab = "Number of steps",
main = "Weekend", col = "blue")
?plot
?title
par(mfcol = c(2, 1))
plot(names(iWeekend), iWeekend, type = "l",
xlab = NA, ylab = "Number of steps",
main = "Weekend", col = "blue")
plot(names(iWeekday), iWeekday, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekday", col = "blue")
title(ylab = "Number of steps",outer = TRUE)
?par
par(mfcol = c(2, 1), oma = c(1,1,1,0))
plot(names(iWeekend), iWeekend, type = "l",
xlab = NA, ylab = "Number of steps",
main = "Weekend", col = "blue")
plot(names(iWeekday), iWeekday, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekday", col = "blue")
title(ylab = "Number of steps",outer = TRUE)
par(mfcol = c(2, 1), oma = c(1,3,1,0))
plot(names(iWeekend), iWeekend, type = "l",
xlab = NA, ylab = "Number of steps",
main = "Weekend", col = "blue")
plot(names(iWeekday), iWeekday, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekday", col = "blue")
title(ylab = "Number of steps",outer = TRUE)
par(mfcol = c(2, 1), oma = c(1,4,1,0))
plot(names(iWeekend), iWeekend, type = "l",
xlab = NA, ylab = "Number of steps",
main = "Weekend", col = "blue")
plot(names(iWeekday), iWeekday, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekday", col = "blue")
title(ylab = "Number of steps",outer = FALSE)
par(mfcol = c(2, 1))
plot(names(iWeekend), iWeekend, type = "l",
xlab = NA, ylab = "Number of steps",
main = "Weekend", col = "blue")
plot(names(iWeekday), iWeekday, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekday", col = "blue")
par(mfcol = c(2, 1), oma = (0,0,0,0))
plot(names(iWeekend), iWeekend, type = "l",
xlab = NA, ylab = "Number of steps",
main = "Weekend", col = "blue")
plot(names(iWeekday), iWeekday, type = "l",
xlab = "Intervals", ylab = "Number of steps",
main = "Weekday", col = "blue")
